{"version":3,"sources":["webpack:///./src/styles.css","webpack:///./src/styles.css?52f6","webpack:///./src/index.js"],"names":["module","exports","__webpack_require__","push","i","OmL/","n","e","o","content","hmr","transform","insertInto","locals","console","log","process","element","btn","br","preElement","document","createElement","innerHTML","_","join","appendChild","onclick","then","bind","default","body"],"mappings":"iFAAAA,EAAAC,QAA2BC,EAAQ,OAARA,MAE3BC,KAAA,CAAcH,EAAAI,EAAS,2MAAyM,MAAAC,OAAA,SAAAC,EAAAC,EAAAC,GCDhO,IAAAC,EAAcP,EAAQ,QAEtB,iBAAAO,MAAA,EAA4CT,EAAAI,EAASK,EAAA,MAYxCP,EAAQ,OAARA,CAAwDO,EALrE,CAAeC,OAEfC,iBACAC,oBAIAH,EAAAI,SAAAb,EAAAC,QAAAQ,EAAAI,yGCIAC,QAAQC,IAAI,gCAAiCC,cAiC7C,IA1BMC,EACAC,EACAC,EACAC,EAuBFH,GA1BEA,EAAUI,SAASC,cAAc,OACjCJ,EAAMG,SAASC,cAAc,UAC7BH,EAAKE,SAASC,cAAc,MAC5BF,EAAaC,SAASC,cAAc,OAGxCL,EAAQM,UAAYC,IAAEC,KAAK,CAAC,QAAS,WAAY,KAEjDP,EAAIK,UAAY,oCAGhBH,EAAWG,UAAY,uBAA8B,MAErDN,EAAQS,YAAYP,GACpBF,EAAQS,YAAYR,GACpBD,EAAQS,YAAYN,GAGpBF,EAAIS,QAAU,SAAApB,GAAC,OAAIL,EAAAK,EAAA,GAAAqB,KAAA1B,EAAA2B,KAAA,cAAkDD,KAAK,SAAA5B,MAC1DA,EAAO8B,cAIhBb,GAITI,SAASU,KAAKL,YAAYT","file":"app.737a998b571b5fd92455.js","sourcesContent":["exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/*\\n * @Description: 入口主文件引入的 css 文件，可配合模块热替换功能\\n * @Author: Shie\\n * @Date: 2018-12-27\\n * @Last Modified by: Shie\\n * @Last Modified time: 2019-01-09 19:32:15\\n */\\n\\nbody {\\n  background: red;\\n}\\n\", \"\"]);\n\n","\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js!./styles.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js!./styles.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js!./styles.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/*\n * @Description: 入口主文件\n * @Author: Shie\n * @Date: 2018-12-19\n * @Last Modified by: Shie\n * @Last Modified time: 2019-01-11 15:39:26\n */\n\n// import() 调用会在内部用到 promise。如果有在旧版本浏览器中使用 import()，记得使用一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.array.iterator\";\n\nimport _ from 'lodash';\n// import printMe from './print.js';\nimport { cube } from './math.js';\nimport './styles.css';\n\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Looks like we are in development mode!');\n}\n\nconsole.log('process.env.NODE_ENV in src: ', process.env.NODE_ENV);\n\n/**\n * 静态导入 lodash\n * @returns {Object} 返回创建的 DOM 元素对象\n */\nfunction component() {\n  var element = document.createElement('div');\n  var btn = document.createElement('button');\n  var br = document.createElement('br');\n  var preElement = document.createElement('pre');\n\n  // Lodash, now imported by this script\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n  btn.innerHTML = 'Click me and look at the console!';\n  // btn.onclick = printMe;\n\n  preElement.innerHTML = '5 cubed is equal to ' + cube(5);\n\n  element.appendChild(br);\n  element.appendChild(btn);\n  element.appendChild(preElement);\n\n  // import() 实现懒加载\n  btn.onclick = e => import(/* webpackChunkName: \"print\" */ './print').then(module => {\n    const print = module.default;\n    print();\n  });\n\n  return element;\n}\n\nvar element = component(); // 当 print.js 改变导致页面重新渲染时，重新获取渲染的元素\ndocument.body.appendChild(element);\n\n/**\n * 动态导入 lodash\n * @returns {Promise} Promise object represents the DOM element.\n */\n// function getComponent() {\n//   return import(/* webpackChunkName: \"lodash\" */ 'lodash').then(function(_) {\n//     var element = document.createElement('div');\n//     var btn = document.createElement('button');\n//     var preElement = document.createElement('pre');\n\n//     element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n//     btn.innerHTML = 'Click me and check the console!';\n//     btn.onclick = printMe;\n\n//     preElement.innerHTML = '5 cubed is equal to ' + cube(5);\n\n//     element.appendChild(btn);\n//     element.appendChild(preElement);\n\n//     return element;\n//   }).catch(function(error) { return 'An error occurred while loading the component' });\n// }\n\n\n/**\n * 使用 async 函数简化动态导入 lodash 代码\n * @returns {Promise} Promise object represents the DOM element.\n */\n// async function getComponent() {\n//   const element = document.createElement('div');\n//   const _ = await import(/* webpackChunkName: \"lodash\" */ 'lodash');\n\n//   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n  \n//   return element;\n// }\n\n// getComponent().then(function(component) {\n//   document.body.appendChild(component);\n// })\n\nif(module.hot) {\n  module.hot.accept('./print.js', function() {\n    console.log('Accepting the updated printMe moudle!');\n    document.body.removeChild(element);\n    element = component(); // 重新渲染页面后，component 更新 click 事件处理\n    document.body.appendChild(element);\n  })\n}\n"],"sourceRoot":""}